<?xml version="1.0"?>
<phpunit xmlns="https://schema.phpunit.de/coverage/1.0">
  <file name="XmlProcessor.php" path="/Utils">
    <totals>
      <lines total="36" comments="6" code="30" executable="4" executed="4" percent="100.00"/>
      <methods count="2" tested="2" percent="100.00"/>
      <functions count="0" tested="0" percent="0"/>
      <classes count="1" tested="1" percent="100.00"/>
      <traits count="0" tested="0" percent="0"/>
    </totals>
    <class name="Choosit\ModeloBundle\Utils\XmlProcessor" start="8" executable="4" executed="4" crap="2">
      <namespace name="Choosit\ModeloBundle\Utils"/>
      <method name="phpToXml" signature="phpToXml(array $data)" start="13" end="24" crap="1" executable="2" executed="2" coverage="100"/>
      <method name="xmlToPhp" signature="xmlToPhp(string $data)" start="29" end="34" crap="1" executable="2" executed="2" coverage="100"/>
    </class>
    <coverage>
      <line nr="15">
        <covered by="Choosit\ModeloBundle\Tests\Unit\XmlProcessorTest::testPhpToXmlShouldReturnWellFormedXml with data set &quot;simple-php-array&quot;"/>
      </line>
      <line nr="17">
        <covered by="Choosit\ModeloBundle\Tests\Unit\XmlProcessorTest::testPhpToXmlShouldReturnWellFormedXml with data set &quot;simple-php-array&quot;"/>
      </line>
      <line nr="31">
        <covered by="Choosit\ModeloBundle\Tests\Unit\XmlProcessorTest::testXmlToPhpShouldReturnWellFormedPhpArray with data set &quot;simple-xml&quot;"/>
        <covered by="Choosit\ModeloBundle\Tests\Unit\XmlProcessorTest::testXmlToPhpShouldReturnWellFormedPhpArray with data set &quot;xml-with-attributes&quot;"/>
        <covered by="Choosit\ModeloBundle\Tests\Unit\ModeloHttpClientTest::testCreateContratFromExistentModelShouldReturnString with data set &quot;model&quot;"/>
        <covered by="Choosit\ModeloBundle\Tests\Unit\ModeloHttpClientTest::testCreateContratFromExistentModelShouldReturnString with data set &quot;doctype&quot;"/>
        <covered by="Choosit\ModeloBundle\Tests\Unit\ModeloHttpClientTest::testDisableContractShouldReturnNoticeMessage with data set &quot;disable-contract-success&quot;"/>
        <covered by="Choosit\ModeloBundle\Tests\Unit\ModeloHttpClientTest::testGetContractFilledContentShouldReturnContentAsArray with data set &quot;content-filled&quot;"/>
        <covered by="Choosit\ModeloBundle\Tests\Unit\ModeloHttpClientTest::testCreateContratFromNonExistentModelShouldThrowModelNotFound with data set &quot;model&quot;"/>
        <covered by="Choosit\ModeloBundle\Tests\Unit\ModeloHttpClientTest::testCreateContratFromNonExistentModelShouldThrowModelNotFound with data set &quot;doctype&quot;"/>
        <covered by="Choosit\ModeloBundle\Tests\Unit\ModeloHttpClientTest::testAnyRequestWithTechnicalIssueShouldThrowException with data set &quot;authentication&quot;"/>
        <covered by="Choosit\ModeloBundle\Tests\Unit\ModeloHttpClientTest::testAnyRequestWithTechnicalIssueShouldThrowException with data set &quot;unauthorized&quot;"/>
        <covered by="Choosit\ModeloBundle\Tests\Unit\ModeloHttpClientTest::testGetAllModelFieldsShouldReturnFieldsAsArray with data set &quot;all-model-fields&quot;"/>
      </line>
      <line nr="33">
        <covered by="Choosit\ModeloBundle\Tests\Unit\XmlProcessorTest::testXmlToPhpShouldReturnWellFormedPhpArray with data set &quot;simple-xml&quot;"/>
        <covered by="Choosit\ModeloBundle\Tests\Unit\XmlProcessorTest::testXmlToPhpShouldReturnWellFormedPhpArray with data set &quot;xml-with-attributes&quot;"/>
        <covered by="Choosit\ModeloBundle\Tests\Unit\ModeloHttpClientTest::testCreateContratFromExistentModelShouldReturnString with data set &quot;model&quot;"/>
        <covered by="Choosit\ModeloBundle\Tests\Unit\ModeloHttpClientTest::testCreateContratFromExistentModelShouldReturnString with data set &quot;doctype&quot;"/>
        <covered by="Choosit\ModeloBundle\Tests\Unit\ModeloHttpClientTest::testDisableContractShouldReturnNoticeMessage with data set &quot;disable-contract-success&quot;"/>
        <covered by="Choosit\ModeloBundle\Tests\Unit\ModeloHttpClientTest::testGetContractFilledContentShouldReturnContentAsArray with data set &quot;content-filled&quot;"/>
        <covered by="Choosit\ModeloBundle\Tests\Unit\ModeloHttpClientTest::testCreateContratFromNonExistentModelShouldThrowModelNotFound with data set &quot;model&quot;"/>
        <covered by="Choosit\ModeloBundle\Tests\Unit\ModeloHttpClientTest::testCreateContratFromNonExistentModelShouldThrowModelNotFound with data set &quot;doctype&quot;"/>
        <covered by="Choosit\ModeloBundle\Tests\Unit\ModeloHttpClientTest::testAnyRequestWithTechnicalIssueShouldThrowException with data set &quot;authentication&quot;"/>
        <covered by="Choosit\ModeloBundle\Tests\Unit\ModeloHttpClientTest::testAnyRequestWithTechnicalIssueShouldThrowException with data set &quot;unauthorized&quot;"/>
        <covered by="Choosit\ModeloBundle\Tests\Unit\ModeloHttpClientTest::testGetAllModelFieldsShouldReturnFieldsAsArray with data set &quot;all-model-fields&quot;"/>
      </line>
    </coverage>
    <source>
      <line no="1">
        <token name="T_OPEN_TAG">&lt;?php</token>
      </line>
      <line no="2"/>
      <line no="3">
        <token name="T_NAMESPACE">namespace</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Choosit</token>
        <token name="T_NS_SEPARATOR">\</token>
        <token name="T_STRING">ModeloBundle</token>
        <token name="T_NS_SEPARATOR">\</token>
        <token name="T_STRING">Utils</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="4"/>
      <line no="5">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Symfony</token>
        <token name="T_NS_SEPARATOR">\</token>
        <token name="T_STRING">Component</token>
        <token name="T_NS_SEPARATOR">\</token>
        <token name="T_STRING">Serializer</token>
        <token name="T_NS_SEPARATOR">\</token>
        <token name="T_STRING">Encoder</token>
        <token name="T_NS_SEPARATOR">\</token>
        <token name="T_STRING">XmlEncoder</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="6">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONST">const</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">XML_PI_NODE</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="7"/>
      <line no="8">
        <token name="T_CLASS">class</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">XmlProcessor</token>
      </line>
      <line no="9">
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="10">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="11">
        <token name="T_DOC_COMMENT">     * @return false|string</token>
      </line>
      <line no="12">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="13">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STATIC">static</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">phpToXml</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_ARRAY">array</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$data</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="14">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="15">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$encoder</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">XmlEncoder</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="16"/>
      <line no="17">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$encoder</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">encode</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$data</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'xml'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
      </line>
      <line no="18">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'xml_root_node_name'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'xml'</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="19">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'xml_format_output'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="20">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'encoder_ignored_node_types'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
      </line>
      <line no="21">
        <token name="T_WHITESPACE">                </token>
        <token name="T_STRING">XML_PI_NODE</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="22">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="23">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="24">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="25"/>
      <line no="26">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="27">
        <token name="T_DOC_COMMENT">     * @return array|mixed|string</token>
      </line>
      <line no="28">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="29">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STATIC">static</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">xmlToPhp</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$data</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="30">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="31">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$encoder</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">XmlEncoder</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="32"/>
      <line no="33">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$encoder</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">decode</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$data</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'xml'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="34">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="35">
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="36"/>
    </source>
  </file>
</phpunit>
